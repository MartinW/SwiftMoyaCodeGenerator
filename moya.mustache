import Moya

public enum API {
    case {{{requestName}}}{{#queryParamsType}}({{{queryParamsType}}}){{/queryParamsType}}
}

extension API: TargetType {

    public var baseURL: NSURL { return NSURL(string: "{{{baseURL}}}")! }

    public var path: String {
        switch self {
        case .{{{requestName}}}{{#requestParameter}}({{{requestParameter}}}){{/requestParameter}}:
            return "{{{pathExtension}}}"
        }
    }

    public var method: Moya.Method {
        return .{{{request.method}}}
    }

    public var parameters: [String: AnyObject]? {
        switch self {
        {{#queryParams}}
        case .{{{requestName}}}({{{queryParams}}}):
            return {{#queryDictString}}[{{{queryDictString}}}]{{/queryDictString}}
        {{/queryParams}}
        {{#jsonBodyParams}}
        case .{{{requestName}}}({{{jsonBodyParams}}}):
            return {{#jsonBodyDictString}}[{{{jsonBodyDictString}}}]{{/jsonBodyDictString}}
        {{/jsonBodyParams}}
        {{^queryParams}}
        {{^jsonBodyParams}}
        default:
            return nil
        {{/jsonBodyParams}}
        {{/queryParams}}
        }
    }

    // TODO: Provide proper sampleData!
    // Currently PAW API does not support Response access,
    // so it was not possible to do it automatically.
    public var sampleData: NSData {
        switch self {
        case .{{{requestName}}}:
            return "{}".dataUsingEncoding(NSUTF8StringEncoding)!
        }
    }
}

// See https://github.com/Moya/Moya/blob/master/docs/Targets.md#escaping-urls
extension String {
    var URLEscapedString: String {
        return self.stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet.URLHostAllowedCharacterSet())!
    }
}
